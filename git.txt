Github教程
附录：
A：常见命令
1.Cd ..        //返回上层文件夹
2.Cd 文件名   //进入下层文件夹
3.Ls          //展示文件夹中的内容
4.Mkdir       //创建一个空文件夹、
5.Git init      // 把当前进入的目录 变成git可以管理的的仓库 
1.简介
1.1.分布式版本控制系统
1.2.能记录每次文件的改动 可以协作编辑
1.3.起源于linus对于linus社区代码的维护
1.4.集中式版本控制系统vs分布式版本控制系统
1.4.1.集中式 cvs 、svn：比如一图书馆 版本库存储在中央服务器中，用户在自己本地开发 需要到中央服务器上更新 上传自己的版本。比较明显的缺点是必须联网才能工作。
1.4.2.分布式github：每个用户自己拥有完整的版本库，可以不联网直接使用。不通使用者之间可以相互推送自己的代码进行交流。同时大多数时候github也会有一个中央服务器电脑  只是用户方便交互大家的修改。
2. 创建版本库（repository）
2.1.在空白目录下创建版本库
Mkdir命令创建一个空白的文件夹   git init 将当前目录变成一个可以由 git可以管理的仓库
2.2.把文件添加到版本库
版本控制系统只能跟踪文本的改动，图片、视频这些二进制文件没法跟踪文件的变化。Micorsoft的word是二进制的需要注意
使用window的txt编辑文件需要注意txt在文件开通添加了十六进制的一个字符需要注意。同时编辑代码的时候需要注意代码的编码格式问题  建议统一使用utf-8编码
2.2.1.把需要提交的文件 放到版本控制库的文件夹中去
2.2.2.使用 git add 完整文件名 把文件添加到版本库中去
2.2.3.使用  git commit -m “xxx”  提交文件到版本库
3.查看版本变化
     3.1.查看当前版本库状态
使用git status查看当前版本库的状态  

Eg：   
     3.2.查看版本库中具体的文件变化
使用git diff 查看版本库中文件变化情况
Eg
4.版本回退

4.1.查看版本历史记录
命令：Git log   从最近记录按时间排列	包含提交id  作者 日期  commit提交的注释
Commit id 是一个非常大的十六进制的数字 是为了避免版本号冲突
Eg  
   4.2.版本回退
HEAD : 标识当前版本
HEAD^: 标识上一个版本
HEAD^^ : 表示向上两个版本
HEAD~NUM  :表示向上数num个版本
使用 git reset --hard HEAD^ 可以回退到上个版本
使用 cat 文件名  可以查看文件内容
使用 git reset --hard +commit id 可以回退到指定的版本中去  包括已经回退了的未来的版本

版本变更的所用的时间非常短 因为  版本变更原理是通过head指针指向指定版本 并更新相应的文件

5.工作区和暂存区	
      
     Add 命令将工作区的中间放到暂存区 
     Commit 将暂存区中的文件添加到master分支中去
     Master分支是版本库刚建立时创建的一个分支结构

